[


  
    
    {
      "title": "Auckland NZ ðŸ‡³ðŸ‡¿",
      "permalink": "http://0.0.0.0:4321/event/auckland/",
      "link": "http://0.0.0.0:4321/event/auckland/",
      "date": "2018-09-04T00:00:00+12:00",
      
      "author": {
        "name": "Rails Girls Jr Team",
        "url": "https://railsgirlsjr.com/",
        "email": "contact@railsgirlsjr.com"
      },
      "content": "<p>As we know Amazon CloudFront doesnâ€™t support HSTS (HTTP Strict Transport Security) headers. If you tried adding it via CLI or web console, it will be prefixed with <code class=\"highlighter-rouge\">x-amz-</code>.</p>\n\n<p>But today weâ€™re now able to use AWS <a href=\"http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-at-the-edge.html\">Lambda@Edge</a> to execute functions that customize the content that is delivered through CloudFront.</p>\n\n<p>You can access AWS Lambda via its web console, then create (author) a function from scratch, create a new role from template Basic Edge Lambda permissions, then use the following code:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"s1\">'use strict'</span><span class=\"p\">;</span>\n<span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">handler</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">Records</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">cf</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">;</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">headers</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'strict-transport-security'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n    <span class=\"na\">key</span><span class=\"p\">:</span> <span class=\"s1\">'Strict-Transport-Security'</span><span class=\"p\">,</span>   \n    <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"s1\">'max-age=31536000; includeSubdomains; preload'</span>\n  <span class=\"p\">}];</span>\n\n  <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>The above code snippet is straightforward: simply add the <code class=\"highlighter-rouge\">Strict-Transport-Security</code> we need and return the modified header to edge nodes. Then you can publish a new version, create a CloudFront trigger using Distribution ID for the distribution you want to apply this header. Make sure to select <code class=\"highlighter-rouge\">Origin Response</code> for your Lambda function to listen for.</p>\n\n<p>Once this is submitted new headers will take effect as expected:</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>curl <span class=\"nt\">-I</span> https://sparanoid.com/\nHTTP/1.1 200 OK\nContent-Type: text/html<span class=\"p\">;</span> <span class=\"nv\">charset</span><span class=\"o\">=</span>utf-8\nContent-Length: 6816\nConnection: keep-alive\nStrict-Transport-Security: max-age<span class=\"o\">=</span>31536000<span class=\"p\">;</span> includeSubdomains<span class=\"p\">;</span> preload\nAge: 9128\nCache-Control: public, max-age<span class=\"o\">=</span>1800, immutable\n...\n</code></pre></div></div>\n\n<p>Updated Mar 21, 2018: Now Amazon Web Services has an official documentation for this feature: <a href=\"https://aws.amazon.com/blogs/networking-and-content-delivery/adding-http-security-headers-using-lambdaedge-and-amazon-cloudfront/\">Adding HTTP Security Headers Using Lambda@Edge and Amazon CloudFront\n</a>.</p>",
      "excerpt": "As we know Amazon CloudFront doesnâ€™t support HSTS (HTTP Strict Transport Security) headers. If you tried adding it via CLI or web console, it will be prefixed with x-amz-.",
      "languages": null,
      "categories": ["event"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "HSTS for Amazon CloudFront",
      "permalink": "http://0.0.0.0:4321/note/cloudfront-hsts/",
      "link": "http://0.0.0.0:4321/note/cloudfront-hsts/",
      "date": "2017-11-13T00:00:00+13:00",
      
      "author": {
        "name": "Rails Girls Jr Team",
        "url": "https://railsgirlsjr.com/",
        "email": "contact@railsgirlsjr.com"
      },
      "content": "<p>As we know Amazon CloudFront doesnâ€™t support HSTS (HTTP Strict Transport Security) headers. If you tried adding it via CLI or web console, it will be prefixed with <code class=\"highlighter-rouge\">x-amz-</code>.</p>\n\n<p>But today weâ€™re now able to use AWS <a href=\"http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-at-the-edge.html\">Lambda@Edge</a> to execute functions that customize the content that is delivered through CloudFront.</p>\n\n<p>You can access AWS Lambda via its web console, then create (author) a function from scratch, create a new role from template Basic Edge Lambda permissions, then use the following code:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"s1\">'use strict'</span><span class=\"p\">;</span>\n<span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">handler</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">Records</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">cf</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">;</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">headers</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'strict-transport-security'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n    <span class=\"na\">key</span><span class=\"p\">:</span> <span class=\"s1\">'Strict-Transport-Security'</span><span class=\"p\">,</span>   \n    <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"s1\">'max-age=31536000; includeSubdomains; preload'</span>\n  <span class=\"p\">}];</span>\n\n  <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>The above code snippet is straightforward: simply add the <code class=\"highlighter-rouge\">Strict-Transport-Security</code> we need and return the modified header to edge nodes. Then you can publish a new version, create a CloudFront trigger using Distribution ID for the distribution you want to apply this header. Make sure to select <code class=\"highlighter-rouge\">Origin Response</code> for your Lambda function to listen for.</p>\n\n<p>Once this is submitted new headers will take effect as expected:</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>curl <span class=\"nt\">-I</span> https://sparanoid.com/\nHTTP/1.1 200 OK\nContent-Type: text/html<span class=\"p\">;</span> <span class=\"nv\">charset</span><span class=\"o\">=</span>utf-8\nContent-Length: 6816\nConnection: keep-alive\nStrict-Transport-Security: max-age<span class=\"o\">=</span>31536000<span class=\"p\">;</span> includeSubdomains<span class=\"p\">;</span> preload\nAge: 9128\nCache-Control: public, max-age<span class=\"o\">=</span>1800, immutable\n...\n</code></pre></div></div>\n\n<p>Updated Mar 21, 2018: Now Amazon Web Services has an official documentation for this feature: <a href=\"https://aws.amazon.com/blogs/networking-and-content-delivery/adding-http-security-headers-using-lambdaedge-and-amazon-cloudfront/\">Adding HTTP Security Headers Using Lambda@Edge and Amazon CloudFront\n</a>.</p>",
      "excerpt": "As we know Amazon CloudFront doesnâ€™t support HSTS (HTTP Strict Transport Security) headers. If you tried adding it via CLI or web console, it will be prefixed with x-amz-.",
      "languages": null,
      "categories": ["note"],
      "tags": []
    }
    
  

  

  


]
